import java.util.Scanner;

public class SudokuGame {
    private static final int SIZE = 9;
    private static final int EMPTY = 0;
    private static int[][] board = new int[SIZE][SIZE];

    public static void main(String[] args) {
        initializeBoard();
        printBoard();

        while (!isSudokuSolved()) {
            playTurn();
            printBoard();
        }

        System.out.println("Congratulations! Sudoku solved!");
    }

    private static void initializeBoard() {
        // Add your initial Sudoku configuration here
        // Use 0 for empty cells
        // Example:
        /*
        board = new int[][]{
            {5, 3, 0, 0, 7, 0, 0, 0, 0},
            {6, 0, 0, 1, 9, 5, 0, 0, 0},
            {0, 9, 8, 0, 0, 0, 0, 6, 0},
            {8, 0, 0, 0, 6, 0, 0, 0, 3},
            {4, 0, 0, 8, 0, 3, 0, 0, 1},
            {7, 0, 0, 0, 2, 0, 0, 0, 6},
            {0, 6, 0, 0, 0, 0, 2, 8, 0},
            {0, 0, 0, 4, 1, 9, 0, 0, 5},
            {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };
        */
    }

    private static void printBoard() {
        System.out.println("-------------------------");

        for (int i = 0; i < SIZE; i++) {
            System.out.print("| ");
            for (int j = 0; j < SIZE; j++) {
                System.out.print(board[i][j] + " ");
                if ((j + 1) % 3 == 0) {
                    System.out.print("| ");
                }
            }
            System.out.println();
            if ((i + 1) % 3 == 0) {
                System.out.println("-------------------------");
            }
        }
    }

    private static void playTurn() {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter row (1-9): ");
        int row = scanner.nextInt() - 1;

        System.out.print("Enter column (1-9): ");
        int col = scanner.nextInt() - 1;

        System.out.print("Enter value (1-9): ");
        int value = scanner.nextInt();

        if (isValidMove(row, col, value)) {
            board[row][col] = value;
            System.out.println("Move accepted!");
        } else {
            System.out.println("Invalid move. Try again.");
        }
    }

    private static boolean isValidMove(int row, int col, int value) {
        // Check if the move is valid (row, column, and box constraints)
        return isRowValid(row, value) && isColumnValid(col, value) && isBoxValid(row - row % 3, col - col % 3, value);
    }

    private static boolean isRowValid(int row, int value) {
        for (int col = 0; col < SIZE; col++) {
            if (board[row][col] == value) {
                return false;
            }
        }
        return true;
    }

    private static boolean isColumnValid(int col, int value) {
        for (int row = 0; row < SIZE; row++) {
            if (board[row][col] == value) {
                return false;
            }
        }
        return true;
    }

    private static boolean isBoxValid(int startRow, int startCol, int value) {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (board[startRow + row][startCol + col] == value) {
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean isSudokuSolved() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == EMPTY) {
                    return false;
                }
            }
        }
        return true;
    }
}
